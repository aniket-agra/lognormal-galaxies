#!/usr/bin/env python
#============================================================================
# This is the Python script of calculating the cross correlation function
# of matter and galaxy density fields generated by the lognormal code. 
# The cross correlation function is useful for calculating the cross 
# power spectrum which can be used to calculate the cross correlation 
# coefficient and the Kaiser prediction.
#
# The code consists of two steps -
# [1] First the cross correlation function of the Gaussianized matter and
#     and density fields is calculated as
#     xi_G(r) = int k^2*sqrt{P_{Ggg}(k)*P_{Gmm}(k)}*dk/2/pi^2
# [2] Then the cross correlation function is given by
#     xi_{gm}(r) = e^{xi_G(r)}-1.
#	
# The code uses a Romberg integration to calculate the Gaussian cross
# correlation function.  
# The error in integration can be changed by changing the parameter in the
# integration romb(1.e-8) line in the C++ code. The default value is 1e-8.
#
# You need to provide the Gaussian galaxy power spectrum P_{Ggg}(k), 
# the Gaussian matter power spectrum P_{Gmm}(k) - these are calculated already
# at the time of generation of galaxy fields, the no. of columns
# in the power spectra files, the column no. of k, P(k) and the value of kmax 
# used in the integration. 
# NOTE that the default version assumes that the Gaussian galaxy and matter
# power spectra are specified at the SAME values of k. The output file is 
# named xi_gm_kmax%f.dat.
#
# 15 Mar 2016
# by Aniket Agrawal
#============================================================================


import os
import random
class executable:
	"""A class for running executables"""
	def __init__(self,exename):
		self.exename=exename
#		self.pfname='params.'+self.exename
	def __call__(self,params):
#		pfile=open(self.pfname,'a')
#		for param in params:
#			try:
#				pfile.write(param+'\n')
#			except:
#				if type(param)==int:
#					pfile.write('%d\n' % param)
#				else:
#					pfile.write('%g\n' % param)
#		pfile.close()
#		cmd = 'time ./'+self.exename+' <'+self.pfname
		nparams = len(params)
		paramfname = params[nparams-1]
		pfile=open(paramfname,'w')
		for iparam in range(0,nparams-1):
			try:
				pfile.write(params[iparam]+'\n')
			except:
				if type(params[iparam])==int:
					pfile.write('%d\n' % params[iparam])
				else:
					pfile.write('%g\n' % params[iparam])
		pfile.close()
		cmd = 'time ./'+self.exename+' <'+paramfname
		print cmd
		os.system(cmd)

#-----------------------------------------------------------------------------
# function to read number of lines in the file
#-----------------------------------------------------------------------------
def file_len(fname):
	f=open(fname)
	for i, l in enumerate(f):
		pass
	f.close()
	return i + 1

pkgfname = 'pkG_rmax10000_b1.455.dat'	#name of galaxy Gaussian power spectrum file
pkmfname = 'pkG_rmax10000_b1.dat'	#name of matter Gaussian power spectrum file
ncol = 2					#no. of columns in power spectra files
kcol = 1					#column no. containing k (starting from 1)
pkcol = 2					#column no. containing P(k) (starting from 1)
kmax = 30
p1fname = 'params_calc_xi_gm.dat'
executable('aux_codes/calc_xi_gm')([pkgfname, pkmfname, ncol, kcol, pkcol, kmax, p1fname])    
